// Generated by CoffeeScript 1.6.2
/*
  yawords
  Букмарклет для повторения слов из Тетрадок Яндекс.Словарей
  https://github.com/avrelian/yawords

  Copyright 2013, Sergey Radchenko
  avrelian@yandex.ru
  avrelian234567@gmail.com
  http://www.facebook.com/Sergey.G.Radchenko

  Released under the MIT, BSD, and GPL Licenses.

  Date: 2013-05-16 19:17:00 +0400
*/


(function() {
  (function($) {
    var $rows, DICTIONARY, KEY_CODE_ENTER, LANG_FROM, LANG_TO, QUESTION_ROWS_SELECTOR, SOME_CODE, TRANSLATION, WORD, bindUI, capitalize, checkAnswer, currentTestType, getCurrentRow, getCurrentTestType, getNextRow, getTestWordByRow, initTest, loadWords, random, selectRow, testWords, ui, unselectRow, words, _ref;

    _ref = [0, 1, 2, 3, 4, 5], LANG_FROM = _ref[0], LANG_TO = _ref[1], SOME_CODE = _ref[2], WORD = _ref[3], TRANSLATION = _ref[4], DICTIONARY = _ref[5];
    KEY_CODE_ENTER = 13;
    QUESTION_ROWS_SELECTOR = '.b-simple-test__question:not(.b-simple-test__question_correct_yes, .b-simple-test__question_correct_no)';
    currentTestType = null;
    words = [];
    testWords = {
      text: [],
      audio: []
    };
    ui = {
      text: {},
      audio: {}
    };
    $rows = {
      text: [],
      audio: []
    };
    random = function(range, start) {
      if (start == null) {
        start = 0;
      }
      return Math.floor(Math.random() * range + start);
    };
    capitalize = function(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    };
    initTest = function(type) {
      var NUM_ROWS, render, selectWords;

      currentTestType = type;
      NUM_ROWS = 10;
      selectWords = function() {
        var _i, _ref1;

        testWords[type] = [];
        for (_i = 0, _ref1 = Math.min(NUM_ROWS, words.length); 0 <= _ref1 ? _i < _ref1 : _i > _ref1; 0 <= _ref1 ? _i++ : _i--) {
          testWords[type].push(words.splice(random(words.length), 1)[0]);
        }
        return words = words.concat(testWords[type]);
      };
      render = function() {
        var getAudio, getRowHtml, index, rowsHtml, word, _i, _len, _ref1;

        getRowHtml = function(num, word) {
          return "<li class=\"b-simple-test__question\">\n  <span class=\"yawords-word-num\">" + num + "</span>.\n  <span class=\"b-simple-test__word\">" + (type === 'text' ? word[WORD] : getAudio(word)) + "</span>\n  <span class=\"b-simple-test__answer\"></span>\n</li>";
        };
        getAudio = function(word) {
          return "<img class=\"b-icon b-icon_type_audio audio\" src=\"//yandex.st/lego/_/La6qi18Z8LwgnZdsAr1qy1GwCwo.gif\" alt=\"Прослушать\" title=\"Прослушать\">\n<span class=\"b-link b-link_pseudo_yes audio\" data-word=\"" + word[WORD] + "\">прослушать</span>";
        };
        rowsHtml = '';
        _ref1 = testWords[type];
        for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
          word = _ref1[index];
          rowsHtml += getRowHtml(index + 1, word);
        }
        ui[type].rowsContainer.html(rowsHtml);
        ui[type].el.append(ui[type].rowsContainer);
        return $rows[type] = ui[type].rowsContainer.find('.b-simple-test__question').addClass('b-link_pseudo_yes').css({
          'overflow': 'hidden'
        }).click(function(ev) {
          var $row;

          $row = $(ev.target).closest(QUESTION_ROWS_SELECTOR);
          if ($row.length) {
            unselectRow();
            selectRow($row);
          }
          if (getCurrentTestType() === 'audio') {
            word = getTestWordByRow($row);
            $(window).triggerHandler("b-playsound", [
              "Sound" + (capitalize(word[LANG_FROM])) + "/" + (encodeURIComponent(word[WORD])), function() {
                return $row.fadeTo("fast", 0.2);
              }, function() {
                return $row.fadeTo("fast", 1);
              }
            ]);
          }
          return false;
        });
      };
      selectWords();
      render();
      selectRow();
      return currentTestType = null;
    };
    checkAnswer = function(type) {
      var $currentRow, $nextRow, getMatches, matches, showAnswer, testWord;

      if (type == null) {
        type = getCurrentTestType();
      }
      showAnswer = function(matches) {
        var $audioLink;

        $currentRow.addClass("b-simple-test__question_correct_" + (matches ? 'yes' : 'no')).find('.b-simple-test__answer').text(matches ? matches.join(', ') : testWord[TRANSLATION]);
        if (type === 'audio') {
          $audioLink = $currentRow.find('.b-link.b-link_pseudo_yes.audio');
          return $audioLink.replaceWith($audioLink.data('word'));
        }
      };
      getMatches = function(testWord, userInput) {
        var translations, userVariants;

        translations = $.map(testWord[TRANSLATION].split(','), $.trim);
        userVariants = $.map(userInput.split(','), $.trim);
        return $.grep(translations, function(translation) {
          return $.grep(userVariants, function(userVariant) {
            return translation === userVariant;
          }).length;
        });
      };
      $currentRow = getCurrentRow();
      testWord = getTestWordByRow();
      matches = getMatches(testWord, ui[type].input.val());
      if (matches.length) {
        showAnswer(matches);
      } else {
        showAnswer();
      }
      ui[type].input.val('');
      unselectRow();
      $nextRow = getNextRow();
      if ($nextRow.length) {
        selectRow($nextRow);
      } else {
        ui[type].control.hide();
        ui[type].moreControl.show();
      }
      return false;
    };
    bindUI = function($el, type) {
      ui[type] = {
        el: $el,
        rowsContainer: $el.find('ul'),
        control: $el.find('.b-simple-test__controls'),
        input: $el.find('.b-simple-test__controls .b-simple-test__input .b-form-input__input'),
        giveAnswerButton: $el.find('.b-simple-test__buttons .b-form-button:eq(0)'),
        giveUpButton: $el.find('.b-simple-test__buttons .b-form-button:eq(1)'),
        moreControl: $el.find('.b-simple-test__more'),
        startOverButton: $el.find('.b-simple-test__more .b-link')
      };
      ui[type].input.off('keyup').keyup(function(ev) {
        if (ev.keyCode === KEY_CODE_ENTER && getCurrentRow().length) {
          return checkAnswer();
        }
      });
      ui[type].giveAnswerButton.click(function() {
        return checkAnswer();
      });
      ui[type].giveUpButton.click(function() {
        return checkAnswer();
      });
      return ui[type].startOverButton.click(function() {
        return initTest(getCurrentTestType());
      });
    };
    getCurrentTestType = function() {
      if (currentTestType) {
        return currentTestType;
      } else {
        if ($('.b-tabbed-pane__panel_state_current .b-simple-test').is('.b-simple-test_type_audio')) {
          return 'audio';
        } else {
          return 'text';
        }
      }
    };
    getCurrentRow = function() {
      return $rows[getCurrentTestType()].filter('.b-simple-test__question_current_yes');
    };
    getNextRow = function() {
      return $rows[getCurrentTestType()].filter(QUESTION_ROWS_SELECTOR).first();
    };
    selectRow = function($row) {
      if ($row == null) {
        $row = getNextRow();
      }
      return $row.addClass('b-simple-test__question_current_yes').removeClass('b-link_pseudo_yes').find('.b-simple-test__answer').text('ваш перевод?');
    };
    unselectRow = function($row) {
      if ($row == null) {
        $row = getCurrentRow();
      }
      $row.removeClass('b-simple-test__question_current_yes').addClass('b-link_pseudo_yes');
      return $row.filter(QUESTION_ROWS_SELECTOR).find('.b-simple-test__answer').text('');
    };
    getTestWordByRow = function($row) {
      var type;

      if ($row == null) {
        $row = getCurrentRow();
      }
      type = getCurrentTestType();
      return testWords[type][$rows[type].index($row)];
    };
    loadWords = function() {
      var $el, getCurrentNotebookId, getUrl;

      $el = $('<div>');
      getCurrentNotebookId = function() {
        return $('.b-menu__item_kind_record-to .b-form-select__select').val() || 0;
      };
      getUrl = function() {
        return "/~p/" + (encodeURIComponent('~тетрадки')) + "/" + (getCurrentNotebookId());
      };
      return $el.load(getUrl(), {
        rnd: Math.random()
      }, function() {
        words = $el.find('.b-notebook.i-bem').data('words');
        initTest('text');
        return initTest('audio');
      });
    };
    $('body').on('click', '.i-popup .b-form-select__text', function() {
      return setTimeout(loadWords, 100);
    });
    bindUI($('.b-simple-test_type_text'), 'text');
    bindUI($('.b-simple-test_type_audio'), 'audio');
    return loadWords();
  })(jQuery);

}).call(this);
